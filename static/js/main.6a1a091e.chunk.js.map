{"version":3,"sources":["components/rocketTable/RocketTable.tsx","components/rocketTable/RocketRow.tsx","store/rockets/types.ts","store/rockets/actions.ts","api/rockets/index.ts","store/rockets/sagas.ts","store/rockets/reducer.ts","store/index.ts","App.tsx","store/configureStore.ts","serviceWorker.ts","index.tsx"],"names":["Alerts","errors","data-testid","map","error","index","Alert","key","variant","message","StyledSpinner","styled","Spinner","Loading","animation","role","className","RocketTable","connect","state","rockets","page","loading","length","Table","striped","bordered","hover","rocket","ActionTypes","StyledLink","a","RocketRow","href","wikiURL","name","configuration","changed","toLocaleDateString","listRequest","createCustomAction","LIST_REQUEST","listSuccess","LIST_SUCCESS","payload","ERROR","parseUrl","url","result","URL","e","getRockets","Promise","resolve","setTimeout","getRocketsList","JSON","data","parse","apiRockets","record","id","json","Date","handleListRequest","watchListRequest","initialSaga","rocketsSaga","call","response","put","takeLatest","all","fork","rocketsReducer","createReducer","handleAction","actions","action","rootSaga","store","initialState","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","applyMiddleware","run","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","Container","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6a1a091e.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { connect } from \"react-redux\";\nimport Table from \"react-bootstrap/Table\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { ApplicationState } from \"../../store\";\nimport { RocketsState } from \"../../store/rockets/types\";\nimport styled from \"styled-components\";\nimport { ApiError } from \"../../api/types\";\nimport { RocketRow } from \".\";\n\ninterface AlertsProps {\n  errors: ApiError[];\n}\n\nconst Alerts: FC<AlertsProps> = ({ errors }) => (\n  <div data-testid=\"alerts\">\n    {errors.map((error, index) => (\n      <Alert key={index} variant=\"warning\">\n        {error.message}\n      </Alert>\n    ))}\n  </div>\n);\n\nconst StyledSpinner = styled(Spinner)`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Loading = () => (\n  <StyledSpinner animation=\"border\" role=\"status\" data-testid=\"loading\">\n    <span className=\"sr-only\">Loading...</span>\n  </StyledSpinner>\n);\n\nexport const UnconnectedRocketTable: FC<RocketsState> = ({\n  page,\n  loading,\n  errors\n}) => {\n  if (errors.length > 0) {\n    return <Alerts errors={errors} />;\n  } else if (loading) {\n    return <Loading />;\n  } else if (page.length === 0) {\n    return <p>Sorry, no rockets found.</p>;\n  }\n  return (\n    <Table striped bordered hover data-testid=\"rockets\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Configuration</th>\n          <th>Last Updated</th>\n        </tr>\n      </thead>\n      <tbody>\n        {page.map((rocket, index) => (\n          <RocketRow key={index} rocket={rocket} />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst mapStateToProps = (state: ApplicationState) => {\n  return {\n    errors: state.rockets.errors,\n    page: state.rockets.page,\n    loading: state.rockets.loading\n  };\n};\n\nexport const RocketTable = connect(mapStateToProps)(UnconnectedRocketTable);\n","import React, { FC, HTMLAttributes } from \"react\";\nimport { Rocket } from \"../../store/rockets/types\";\nimport styled from \"styled-components\";\n\ninterface RocketRowProps extends HTMLAttributes<HTMLTableRowElement> {\n  rocket: Rocket;\n}\n\nconst StyledLink = styled.a`\n  color: #0052ab;\n`;\n\nexport const RocketRow: FC<RocketRowProps> = ({ rocket }) => (\n  <tr>\n    <td>\n      <StyledLink href={rocket.wikiURL?.href}>{rocket.name}</StyledLink>\n    </td>\n    <td>{rocket.configuration}</td>\n    <td>{rocket.changed.toLocaleDateString()}</td>\n  </tr>\n);\n","import { ApiError } from \"../../api/types\";\n\n// This file holds our state type, as well as any other types related to the rockets Redux store.\n\n// The Rocket type, adapted from https://launchlibrary.net/docs/1.4.1/api.html#rocket. Omits some fields.\nexport interface Rocket {\n  id: number;\n  name: string;\n  configuration?: string;\n  wikiURL?: URL;\n  changed: Date;\n}\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in the compiled code.\nexport enum ActionTypes {\n  LIST_REQUEST = \"@@rockets/LIST_REQUEST\",\n  LIST_SUCCESS = \"@@rockets/LIST_SUCCESS\",\n  ERROR = \"@@rockets/ERROR\"\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface RocketsState {\n  readonly loading: boolean;\n  readonly page: Rocket[]; // A page of rockets\n  readonly errors: ApiError[];\n}\n","import { createCustomAction } from \"typesafe-actions\";\nimport { ActionTypes, Rocket } from \"./types\";\nimport { ApiError } from \"../../api/types\";\n\n// Dispatched to request a list of rockets\nexport const listRequest = createCustomAction(ActionTypes.LIST_REQUEST);\n\n// Dispatched when the list of rockets is retrieved successfully\nexport const listSuccess = createCustomAction(\n  ActionTypes.LIST_SUCCESS,\n  (payload: { page: Rocket[] }) => ({\n    payload: payload\n  })\n);\n\n// Dispatched when an error is encountered while interacting with the backend\nexport const error = createCustomAction(\n  ActionTypes.ERROR,\n  (errors: ApiError[]) => ({ payload: errors })\n);\n","import { Rocket } from \"../../store/rockets/types\";\n\n/* This is the API adapter for Launch Library's rocket endpoint:\n   https://launchlibrary.net/docs/1.4.1/api.html#rocket\n\n   This adapter provides a layer of abstraction by:\n     - transforming requests into the format supported by the API\n     - making API calls\n     - transforming responses into the format our app expects\n     - handling errors\n*/\n\nexport interface JsonRocket {\n  id: number;\n  name: string;\n  configuration?: string;\n  wikiURL?: string;\n  changed: string;\n}\n\nexport interface JsonResponse {\n  rockets: JsonRocket[];\n}\n\n// Transform a string into a URL\nexport const parseUrl = (url: string | undefined) => {\n  let result;\n  try {\n    if (url) {\n      result = new URL(url);\n    }\n  } catch (e) {\n    // Oh no!\n  }\n  return result;\n};\n\n// Transform a JsonRocket to a Rocket\nconst transformResponseRecord = (json: JsonRocket): Rocket => {\n  return {\n    id: json.id,\n    name: json.name,\n    configuration: json.configuration,\n    wikiURL: parseUrl(json.wikiURL),\n    changed: new Date(json.changed)\n  };\n};\n\n// A sample response.\nconst FAKE_RESPONSE =\n  '{\"rockets\":[{\"id\":1,\"name\":\"Falcon 9 v1.1\",\"configuration\":\"9 v1.1\",\"defaultPads\":\"84,100\",\"infoURL\":null,\"wikiURL\":\"http://en.wikipedia.org/wiki/Falcon_9\",\"infoURLs\":[\"http://www.spacex.com/falcon9\"],\"imageSizes\":[320,480,640,720,768,800,960,1024,1080,1280],\"imageURL\":\"https://s3.amazonaws.com/launchlibrary/RocketImages/Falcon9v1.1.jpg_1280.jpg\",\"changed\":\"2017-02-21 00:00:00\"},{\"id\":171,\"name\":\"SS-520-5\",\"configuration\":\"5\",\"defaultPads\":\"\",\"infoURL\":\"\",\"wikiURL\":\"https://ja.wikipedia.org/wiki/SS-520%E3%83%AD%E3%82%B1%E3%83%83%E3%83%88\",\"infoURLs\":[\"\"],\"changed\":\"2017-02-21 00:00:00\"},{\"id\":2,\"name\":\"Atlas V 541\",\"configuration\":\"541\",\"infoURL\":\"\",\"wikiURL\":\"http://en.wikipedia.org/wiki/Atlas_V\",\"infoURLs\":[\"\"],\"imageSizes\":[320,480,640,720,768,800,960,1024,1080,1280,1440,1920],\"imageURL\":\"https://s3.amazonaws.com/launchlibrary/RocketImages/Atlas+V+541_1920.jpg\",\"changed\":\"2017-02-21 00:00:00\"},{\"id\":3,\"name\":\"Soyuz 2.1b\",\"configuration\":\"2.1b\",\"defaultPads\":\"\",\"infoURL\":\"\",\"wikiURL\":\"http://en.wikipedia.org/wiki/Soyuz-2_(rocket)\",\"infoURLs\":[\"\"],\"changed\":\"2017-02-21 00:00:00\"}]}';\n\n// Simulate calling the API endpoint https://launchlibrary.net/1.4/rocket?mode=list\nexport const getRockets = async () => {\n  await new Promise(resolve => setTimeout(resolve, 500)); // Wait 0.5s for dramatic effect\n  return FAKE_RESPONSE;\n};\n\n// Call the API endpoint and return the response body\nexport const getRocketsList = async () => {\n  try {\n    const data: JsonResponse = JSON.parse(await getRockets());\n    const apiRockets: JsonRocket[] = data.rockets;\n    const rockets = apiRockets.map(record => transformResponseRecord(record));\n    return { data: rockets };\n  } catch (error) {\n    return { errors: { message: error } };\n  }\n};\n","import { all, call, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { ActionTypes } from \"./types\";\nimport { listSuccess, error, listRequest } from \"./actions\";\nimport { getRocketsList } from \"../../api/rockets\";\n\n// Calls the API endpoint to get a page of rockets whenever a LIST_REQUEST action is dispatched\nfunction* handleListRequest() {\n  const response = yield call(getRocketsList);\n\n  if (\"errors\" in response) {\n    yield put(error(response.errors));\n  } else {\n    yield put(listSuccess({ page: response.data }));\n  }\n}\n\n// Watches for a list request action\nfunction* watchListRequest() {\n  yield takeLatest(ActionTypes.LIST_REQUEST, handleListRequest);\n}\n\n/* If this was a real app with a router like \"connected-react-router\", we'd watch\n   for the appropriate location change action to trigger the list request action. */\nfunction* initialSaga() {\n  yield put(listRequest());\n}\n\n// Split our saga into multiple watchers.\nexport function* rocketsSaga() {\n  yield all([fork(watchListRequest), fork(initialSaga)]);\n}\n","import { createReducer, ActionType } from \"typesafe-actions\";\nimport { RocketsState } from \"./types\";\nimport * as actions from \"./actions\";\n\n// Union type of all actions\nexport type RocketAction = ActionType<typeof import(\"./actions\")>;\n\nexport const initialState: RocketsState = {\n  loading: false,\n  page: [],\n  errors: []\n};\n\n// Create the reducer\nexport const rocketsReducer = createReducer<RocketsState, RocketAction>(\n  initialState\n)\n  // Every *Request action updates the state in exactly the same way\n  .handleAction([actions.listRequest], state => {\n    return { ...state, loading: true, errors: [] };\n  })\n  .handleAction(actions.listSuccess, (state, action) => {\n    return {\n      ...state,\n      loading: false,\n      page: action.payload.page\n    };\n  });\n","import { combineReducers } from \"redux\";\nimport { all, fork } from \"redux-saga/effects\";\n\nimport { RocketsState } from \"./rockets/types\";\nimport { rocketsSaga } from \"./rockets/sagas\";\nimport { rocketsReducer } from \"./rockets/reducer\";\n\n// The top-level state object\nexport interface ApplicationState {\n  rockets: RocketsState;\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = () =>\n  combineReducers({\n    rockets: rocketsReducer\n  });\n\n// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\nexport function* rootSaga() {\n  yield all([fork(rocketsSaga)]);\n}\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { RocketTable } from \"./components/rocketTable\";\nimport configureStore from \"./store/configureStore\";\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore();\n\nexport const App = () => (\n  <Provider store={store}>\n    <Container>\n      <main role=\"main\">\n        <h1>Rockets</h1>\n        <RocketTable />\n      </main>\n    </Container>\n  </Provider>\n);\n","import { Store, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\n// We'll be using Redux Devtools. We can use the `composeWithDevTools()`\n// directive so we can pass our middleware along with it\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n// Import the state interface and our combined reducers/sagas.\nimport { ApplicationState, createRootReducer, rootSaga } from \"./index\";\n\nexport default function configureStore(\n  initialState?: ApplicationState\n): Store<ApplicationState> {\n  // create the composing function for our middlewares\n  const composeEnhancers = composeWithDevTools({});\n  // create the redux-saga middleware\n  const sagaMiddleware = createSagaMiddleware();\n\n  // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n  // we'll be passing from our entry point.\n  const store = createStore(\n    createRootReducer(),\n    initialState,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n  );\n\n  // Don't forget to run the root saga, and return the store object.\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}